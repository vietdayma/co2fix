import streamlit as st
import os
import sys
import requests
import time
import threading
import random
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry

# Th√™m ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i v√†o sys.path (ƒë·ªÉ ƒë·∫£m b·∫£o imports ho·∫°t ƒë·ªông tr√™n Streamlit Cloud)
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(current_dir)

# Must be the first Streamlit command
st.set_page_config(
    page_title="CO2 Emission Predictor",
    page_icon="üåç",
    layout="wide",
    initial_sidebar_state="expanded"
)

from controllers.emission_controller import EmissionController
from views.main_view import MainView

# Set API URL environment variable
os.environ['API_URL'] = 'https://thuco2tiep.onrender.com'

# T·∫°o semaphore ƒë·ªÉ gi·ªõi h·∫°n s·ªë l∆∞·ª£ng request ƒë·ªìng th·ªùi
api_semaphore = threading.Semaphore(5)

# Cache cho c√°c k·∫øt qu·∫£ API
prediction_cache = {}
cache_lock = threading.Lock()
MAX_CACHE_SIZE = 50

def get_session():
    """Create a requests session with retry logic"""
    session = requests.Session()
    retry = Retry(
        total=3,  # Maximum number of retries
        backoff_factor=0.5,  # Backoff factor for retries
        status_forcelist=[429, 500, 502, 503, 504],  # Status codes to retry on
        allowed_methods=["GET", "POST"]  # Methods to retry
    )
    adapter = HTTPAdapter(max_retries=retry)
    session.mount("http://", adapter)
    session.mount("https://", adapter)
    return session

def get_cache_key(features):
    """Generate a cache key from features"""
    try:
        key_parts = []
        for k, v in sorted(features.items()):
            key_parts.append(f"{k}:{v}")
        return "|".join(key_parts)
    except:
        return None

def predict_with_api(features):
    """Make prediction with API using semaphore to limit concurrent requests"""
    cache_key = get_cache_key(features)
    
    # Check cache first
    with cache_lock:
        if cache_key in prediction_cache:
            return prediction_cache[cache_key]
    
    # Use semaphore to limit concurrent API calls
    with api_semaphore:
        try:
            # Add a small random delay to avoid bursts of requests
            time.sleep(random.uniform(0.05, 0.2))
            
            # Make API request
            session = get_session()
            api_url = os.environ.get('API_URL') + "/predict"
            response = session.post(api_url, json=features, timeout=30)
            response.raise_for_status()
            result = response.json()
            
            # Store in cache
            with cache_lock:
                if len(prediction_cache) < MAX_CACHE_SIZE:
                    prediction_cache[cache_key] = result
            
            return result
        except Exception as e:
            st.error(f"L·ªói d·ª± ƒëo√°n t·ª´ API: {str(e)}")
            raise

def check_api_health():
    """Check if API is available and ready"""
    api_url = os.environ.get('API_URL')
    
    st.markdown("### Ki·ªÉm tra k·∫øt n·ªëi API")
    status_placeholder = st.empty()
    status_placeholder.info("ƒêang k·∫øt n·ªëi ƒë·∫øn API server...")
    
    try:
        # Use session with retry logic
        session = get_session()
        response = session.get(f"{api_url}/health", timeout=30)
        
        if response.status_code == 200:
            status_placeholder.success(f"ƒê√£ k·∫øt n·ªëi ƒë·∫øn API server t·∫°i {api_url}")
            return True
        elif response.status_code == 503:
            # API is starting up
            status = response.json().get("status", "")
            message = response.json().get("message", "")
            
            if status == "initializing":
                for i in range(60):  # Wait up to 60 seconds
                    status_placeholder.warning(f"API server ƒëang kh·ªüi t·∫°o m√¥ h√¨nh... Vui l√≤ng ƒë·ª£i ({i+1}/60s)")
                    time.sleep(1)
                    
                    try:
                        response = session.get(f"{api_url}/health", timeout=10)
                        if response.status_code == 200:
                            status_placeholder.success(f"ƒê√£ k·∫øt n·ªëi ƒë·∫øn API server t·∫°i {api_url}")
                            return True
                    except requests.exceptions.RequestException:
                        pass
                
                status_placeholder.error(f"API server kh·ªüi ƒë·ªông qu√° l√¢u. Vui l√≤ng th·ª≠ l·∫°i sau.")
                return False
            else:
                status_placeholder.error(f"API server tr·∫£ v·ªÅ tr·∫°ng th√°i: {message}")
                return False
        else:
            status_placeholder.error(f"API server t·∫°i {api_url} tr·∫£ v·ªÅ m√£ tr·∫°ng th√°i {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        status_placeholder.error(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API server t·∫°i {api_url}: {str(e)}")
        return False

def main():
    st.title("CO2 Emission Prediction")
    
    # Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn API server
    if not check_api_health():
        st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API server. Vui l√≤ng th·ª≠ l·∫°i sau.")
        st.warning("N·∫øu b·∫°n ƒëang ch·∫°y ·ª©ng d·ª•ng c·ª•c b·ªô, h√£y ƒë·∫£m b·∫£o API server ƒëang ch·∫°y t·∫°i https://thuco2tiep.onrender.com")
        return
        
    # Ki·ªÉm tra file CSV t·ªìn t·∫°i
    csv_path = os.path.join(current_dir, "co2 Emissions.csv")
    if not os.path.exists(csv_path):
        st.error(f"L·ªói: Kh√¥ng th·ªÉ t√¨m th·∫•y file '{csv_path}'. Vui l√≤ng ƒë·∫£m b·∫£o file t·ªìn t·∫°i trong th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n.")
        return

    # Initialize controller with overridden API prediction method
    controller = EmissionController()
    # Override the predict_emission_api method to use our semaphore-controlled function
    controller.predict_emission_api = predict_with_api
    
    # Train the model
    try:
        test_score = controller.initialize_model(csv_path)
        st.success(f"M√¥ h√¨nh ƒë∆∞·ª£c hu·∫•n luy·ªán th√†nh c√¥ng. ƒêi·ªÉm ki·ªÉm tra: {test_score:.3f}")
    except Exception as e:
        st.error(f"L·ªói khi hu·∫•n luy·ªán m√¥ h√¨nh: {str(e)}")
        return

    # Initialize and show view
    view = MainView(controller)
    view.show()

if __name__ == "__main__":
    main() 